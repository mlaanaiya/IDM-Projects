import 'SimplePDL.ecore'

package simplepdl

/*context Process
inv warningSeverity: false
inv withMessage('Explicit message in process ' + self.name + ' (withMessage)'): false
inv errorSeverity: null*/

context Process
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()
	
/*Deux activités différentes d’un même processus ne peuvent pas avoir le même nom */

context WorkDefinition
inv notSameNames: self.Process.processElements
				-> select(p | p.oclIsKindOf(WorkDefinition))
				-> collect(p | p.oclAsType(WorkDefinition))
				-> forAll(wd | self = wd or self.name <> wd.name)
/*Une dépendence ne peut pas être réfléxive */
context WorkSequence
inv notReflexive: self.predecessor <> self.successor

/*Le nom d'une activité doit être composé d'au moins deux caractères */	
context WorkDefinition
inv lenghtName: self.name.size() >= 2
/*Le nom d'une activité ne doit être composé que de lettres,chiffres et soulignés,un chiffre ne
 * peut pas être en première position
 */ 
context WorkDefinition
inv formatName: self.name.matches('[A-Za-z_][A-Za-z0-9_]*')
				or self.name.matches('[a-zA-Z_][A-Za-z0-9_]*')
				or self.name.matches('[A-Za-z_][a-zA-Z0-9_]*')
				or self.name.matches('[a-zA-Z_][a-zA-Z0-9_]*')
/*le nombre initial d'une ressource ne doit pas être nul */
context Ressources
inv notEmptyRessources: self.quantity > 0

/*le nombre de ressources demandées est disponible */
context Ressources
inv ressourcesDispobible: self
				-> select(p | p.oclIsKindOf(Control))
				-> collect(p | p.oclAsType(Control))
				-> forAll(occ | self.quantity >= occ.occurences)
endpackage
